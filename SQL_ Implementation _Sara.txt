-- Create Tables --

CREATE TABLE Books (
    BookID INT PRIMARY KEY,
    Title VARCHAR(100),
    Author VARCHAR(100),
    CopiesAvailable INT CHECK (CopiesAvailable >= 0),
    TotalCopies INT CHECK (TotalCopies >= 0)
);

CREATE TABLE Members (
    MemberID INT PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100) UNIQUE,
    TotalBooksBorrowed INT DEFAULT 0,
    IsActive BOOLEAN DEFAULT TRUE
);

CREATE TABLE BorrowedBooks (
    BorrowID INT PRIMARY KEY,
    MemberID INT,
    BookID INT,
    BorrowDate DATE,
    DueDate DATE,
    ReturnDate DATE,
    IsReturned BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (MemberID) REFERENCES Members(MemberID),
    FOREIGN KEY (BookID) REFERENCES Books(BookID)
);  

-- Stored Procedure: BorrowBook --

CREATE PROCEDURE BorrowBook(
    IN p_MemberID INT,
    IN p_BookID INT,
    IN p_BorrowDate DATE,
    IN p_DueDate DATE
)
BEGIN
    -- Declare variables for checks --
    DECLARE v_IsActive BOOLEAN;
    DECLARE v_CopiesAvailable INT;

    -- (1) Check if the member is active --
    SELECT IsActive INTO v_IsActive
    FROM Members
    WHERE MemberID = p_MemberID;

    IF v_IsActive = FALSE THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Member is not active .';
    END IF;

    -- (2) Check if the book has available copies --
    SELECT CopiesAvailable INTO v_CopiesAvailable
    FROM Books
    WHERE BookID = p_BookID;

    IF v_CopiesAvailable = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Book is unavailable.';
    END IF;

    -- (3) Insert a new record into BorrowedBooks --
    INSERT INTO BorrowedBooks (BookID, MemberID, BorrowDate, DueDate, IsReturned)
    VALUES (p_BookID, p_MemberID, CURDATE(), p_DueDate, FALSE);

    -- (4) Decrease CopiesAvailable in Books --
    UPDATE Books
    SET CopiesAvailable = CopiesAvailable - 1
    WHERE BookID = p_BookID;

    -- (5) Increase TotalBooksBorrowed in Members --
    UPDATE Members
    SET TotalBooksBorrowed = TotalBooksBorrowed + 1
    WHERE MemberID = p_MemberID;
END;

-- Index Creation --

CREATE INDEX index_bookid ON Books(BookID);
CREATE INDEX index_memberid ON Members(MemberID);

-- Function: GetBooksBorrowed --

CREATE FUNCTION GetBooksBorrowed(p_MemberID INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE count_borrowed INT;
    SELECT COUNT(*)
    INTO count_borrowed
    FROM BorrowedBooks
    WHERE MemberID = p_MemberID AND IsReturned = FALSE;
    RETURN count_borrowed;
END;
   SELECT GetBooksBorrowed(1);   //check by this 

-- Trigger: PreventBorrowIfNoCopies --

CREATE TRIGGER PreventBorrowIfNoCopies
BEFORE INSERT ON BorrowedBooks
FOR EACH ROW
BEGIN
    -- Declare variables --
    DECLARE v_CopiesAvailable INT;
    DECLARE v_IsActive BOOLEAN;
     -- Get CopiesAvailable --
    SELECT CopiesAvailable INTO v_CopiesAvailable
    FROM Books
    WHERE BookID = NEW.BookID;
      -- Get IsActive --
    SELECT IsActive INTO v_IsActive
    FROM Members
    WHERE MemberID = NEW.MemberID;
    IF v_CopiesAvailable = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = ' No copies available.';
    END IF;
      IF v_IsActive = FALSE THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = ' Member is not active.';
    END IF;
END ;

-- Insert Books
INSERT INTO Books VALUES
(1, '1984', 'George Orwell', 3, 3),
(2, 'To Kill a Mockingbird', 'Harper Lee', 2, 2),
(3, 'Brave New World', 'Aldous Huxley', 1, 1);

-- Insert Members
INSERT INTO Members VALUES
(1, 'Alice', 'alice@example.com', 0, TRUE),
(2, 'Bob', 'bob@example.com', 0, FALSE),
(3, 'Charlie', 'charlie@example.com', 0, TRUE);

-- Borrowing attempts
 - Successful borrow -
CALL BorrowBook(1, 1, '2024-03-15');
 - Book unavailable -
CALL BorrowBook(1, 2, '2024-03-15');
 - Member inactive -
CALL BorrowBook(3, 1, '2024-03-15');
 - Another successful borrow -
CALL BorrowBook(2, 3, '2024-03-20');





